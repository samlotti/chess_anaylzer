package template
// Do Not Edit
// Generated by Blip
// source blip: ../template/index.blip.html

import (
	"context"
	"fmt"
	"github.com/samlotti/blip/blipUtil"
	"io"
	"time"
)



func IndexRender( c context.Context, w io.Writer ) (terror error) {
    start := time.Now()

	var si = blipUtil.Instance()
	var escaper = si.GetEscaperFor( "html") 
	defer func() {
		if err := recover(); err != nil {
			fmt.Printf("Catch panic %s: %s\n", "IndexRender", err)
			terror = fmt.Errorf("%v", err)
		}
	    si.RenderComplete(escaper, "index", "html", time.Since(start), terror)
	}()
	si.Write(w, []byte("<html>\n"))
	// Text block follows
		si.Write(w, []byte("\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM\" crossorigin=\"anonymous\">\n"))
	si.Write(w, []byte("\n<body style=\"padding: 8px\">\n\n\n<h1>Chess AI2</h1>\n\n<form method=\"get\" action=\"/chess/ai/fen\" >\n\n\nFen:\n<input type=\"text\" style=\"width: 50%\" name=\"fen\"><br>\n    2q1rr1k/3bbnnp/p2p1pp1/2pPp3/PpP1P1P1/1P2BNNP/2BQ1PRK/7R b - -<br>\n    2r3k1/p4p2/3Rp2p/1p2P1pK/8/1P4P1/P3Q2P/1q6 b - - 0 1<br>\n    8/k2r4/p7/2b1Bp2/P3p3/qp4R1/4QP2/1K6 b - - 0 1<br>\n    6k1/pp4p1/2p5/2bp4/8/P5Pb/1P3rrP/2BRRN1K b - - 0 1<br>\n    3r4/pR2N3/2pkb3/5p2/8/2B5/qP3PPP/4R1K1 w - - 1 0<br>\n    rn3rk1/pbppq1pp/1p2pb2/4N2Q/3PN3/3B4/PPP2PPP/R3K2R w KQ - 7 11<br>\n    2r3k1/p4p2/3Rp2p/1p2P1pK/8/1P4P1/P3Q2P/1q6 b - - 0 1<br>\n    6k1/3b3r/1p1p4/p1n2p2/1PPNpP1q/P3Q1p1/1R1RB1P1/5K2 b - - 0-1<br>\n    2r3k1/p4p2/3Rp2p/1p2P1pK/8/1P4P1/P3Q2P/1q6 b - - 0 1<br>\n<br>\n    Lines: <input type=\"number\" width=\"10\" name=\"lines\" value=\"5\"><br>\n    Sec Max: <input type=\"number\" width=\"10\" name=\"tsec\" value=\"15\"><br>\n    Depth: <input type=\"number\" width=\"10\" name=\"depth\" value=\"15\"><br>\n<hr>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n</body>\n\n</html>\n"))
	return
}